# Unauthorized user endpoints

###
#@name unauthorized: user
GET http://127.0.0.1:8000/users/1
Accept: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 401, "Response status is not 401");
    });
%}

###
#@name unauthorized: main page
GET http://127.0.0.1:8000/
Accept: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 401");
    });
%}

###
#@name unauthorized: not registred auth
POST http://127.0.0.1:8000/auth/
Accept: application/json
Content-Type: application/x-www-form-urlencoded

grant_type = password &
username = nonregistred%40example.com &
password = 12345


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 401, "Response status is not 401");
    });
%}

###
#@name create user
POST http://127.0.0.1:8000/users/
Accept: application/json
Content-Type: application/json

{
  "email": "user1@example.com",
  "password": "12345"
}


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 401");
    });
%}

###
#@name unauthorized: registred auth
POST http://127.0.0.1:8080/auth/
Accept: application/json
Content-Type: application/x-www-form-urlencoded

grant_type = password &
username = user1%40example.com &
password = 12345


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 401");
    });
%}


###
#@name unauthorized: registred auth
DELETE http://127.0.0.1:8000/users/4

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 401");
    });
%}


###
#@name list user transactions with default navigation
GET http://{{host}}:{{port}}/users/1/transactions
Accept: application/json
Authorization: {{Authorization}}

> {%
    client.test("Response status", function() {
        client.assert(response.status === 200, "Response status != 200");
    });
%}